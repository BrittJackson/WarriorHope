/**
 * Creates a authenticated test session by adding a user into the database
 * then loggin them in.  Returns the session with completed session variables
 * @module authenticatedSession
 */
var supertest = require('supertest-session');
const phash = require('../../routes/login/common/passwordHash');


  /**
   * Creates a user to use when testing for logged in session credentials.  Also has mod priveledges 
   * @param { } db Test database connection pool
   * @param {  } testSession pass the instance of the test session generated by supertest-session.
   * @param {string} username Optional. Default = 'testuser'
   * @param {string} password Optional. Default = 12345678 
   */
async function authenticateSession (db, testSession, username = 'testuser', password = '12345678') {
        
        
    // Create a user by forcing things through the database
    const id = await db.addUser(username, 'test@test.com', await phash(password));
    await db.setGroup(id, 3);
    const sg = await db.addSubgroup(3, id);
    await db.setSubgroup(id, sg);
    
    // Log in the user and return the authenticated session
    return new Promise ((resolve) => {
        testSession.post('/signin')
        .send({ action: 'Submit', username: username, password: password })
        .then(() => {
            resolve(testSession);
        });
    });
    
}

  module.exports  = { authenticateSession }